{"version":3,"sources":["redux/phone/phoneOperations.js","components/ContactEditor.js","redux/phone/phoneSelectors.js","components/Filter.js","components/ContactListItem.js","components/ContactList.js","views/Contacts.js"],"names":["axios","defaults","baseURL","addContact","name","number","dispatch","a","addContactsRequest","post","data","addContactsSuccess","addContactsError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","ContactEditor","state","unic","handleChange","target","value","props","items","find","contact","setState","handleSubmit","e","preventDefault","onAddContact","this","onSubmit","htmlFor","type","onChange","Alert","severity","className","Component","mapDispatchToProps","phoneOperations","connect","contacts","getContacts","getFilter","filter","getVisibleContacts","createSelector","toLowerCase","includes","getContactById","contactId","item","onChangeFilter","changeFilter","phoneSalectors","length","useStyles","makeStyles","theme","button","margin","spacing","ownProps","phoneSelectors","onRemove","classes","Box","display","justifyContent","width","boxShadow","Button","variant","color","startIcon","size","onClick","map","Contacts","onFetchContacts"],"mappings":"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","file":"static/js/4.02d26665.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport {\n  addContactsError,\n  addContactsSuccess,\n  addContactsRequest,\n  fetchContactsRequest,\n  fetchContactsError,\n  fetchContactsSuccess,\n  removeContactsRequest,\n  removeContactsSuccess,\n  removeContactsError,\n} from \"./phonebookActions\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\n\nconst addContact = ({ name, number }) => async (dispatch) => {\n  dispatch(addContactsRequest());\n\n  try {\n    const { data } = await axios.post(\"/contacts\", {\n      name,\n      number,\n    });\n    dispatch(addContactsSuccess(data));\n  } catch (error) {\n    dispatch(addContactsError(error));\n  }\n};\n\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst removeContact = (id) => async (dispatch) => {\n  dispatch(removeContactsRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(removeContactsSuccess(id));\n  } catch (error) {\n    dispatch(removeContactsError(error));\n  }\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, fetchContacts, removeContact };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport phoneOperations from \"../redux/phone/phoneOperations\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nclass ContactEditor extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    unic: true,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    const isNotUnicName = this.props.items.find(\n      (contact) => contact.name === value\n    );\n    if (isNotUnicName) {\n      this.setState({ unic: false });\n    } else {\n      this.setState({\n        [name]: value,\n      });\n      this.setState({ unic: true });\n    }\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onAddContact(this.state);\n  };\n\n  render() {\n    const { name, number, unic } = this.state;\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">\n            Name\n            <br />\n            <input\n              type=\"text\"\n              value={name}\n              onChange={this.handleChange}\n              name=\"name\"\n            />\n          </label>\n          {!unic && <Alert severity=\"error\">This contact is already!</Alert>}\n          <label htmlFor=\"number\">\n            Number\n            <br />\n            <input\n              type=\"text\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n            />\n          </label>\n\n          <button type=\"submit\" className=\"add_contact\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return state.contacts;\n};\n\nconst mapDispatchToProps = {\n  onAddContact: phoneOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactEditor);\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContacts = (state) => state.contacts.items;\n\nconst getFilter = (state) => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getFilter, getContacts],\n  (filter, contacts) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nconst getContactById = (state, contactId) => {\n  const contacts = getContacts(state);\n  return contacts.find((item) => item.id === contactId);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getVisibleContacts, getFilter, getContacts, getContactById };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { changeFilter } from \"../redux/phone/phonebookActions\";\nimport phoneSalectors from \"../redux/phone/phoneSelectors\";\n\nconst Filter = ({ contacts, value, onChangeFilter }) => {\n  if (contacts.length > 0) {\n    return (\n      <div>\n        <span>Find name: </span>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => onChangeFilter(e.target.value)}\n        />\n      </div>\n    );\n  } else return null;\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  contacts: PropTypes.array.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  value: phoneSalectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onChangeFilter: changeFilter,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Box from \"@material-ui/core/Box\";\n\nimport phoneOperations from \"../redux/phone/phoneOperations\";\nimport phoneSelectors from \"../redux/phone/phoneSelectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst ContactListItem = ({ name, number, onRemove }) => {\n  const classes = useStyles();\n  return (\n    <li>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        width=\"290px\"\n        boxShadow={1}\n      >\n        <span className=\"name find\">\n          {name} {number}\n        </span>\n\n        <Button\n          variant=\"contained\"\n          className={classes.button}\n          color=\"secondary\"\n          startIcon={<DeleteIcon />}\n          size=\"small\"\n          onClick={onRemove}\n        >\n          x\n        </Button>\n      </Box>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  ...phoneSelectors.getContactById(state, ownProps.id),\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onRemove: () => dispatch(phoneOperations.removeContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport ContactListItem from \"./ContactListItem\";\nimport phoneSelectors from \"../redux/phone/phoneSelectors\";\n\nconst ContactList = ({ contacts }) => {\n  if (contacts.length > 0) {\n    return (\n      <ul>\n        {contacts.map(({ id }) => (\n          <ContactListItem key={id} id={id} />\n        ))}\n      </ul>\n    );\n  } else return null;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: phoneSelectors.getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ContactEditor from \"../components/ContactEditor\";\nimport Filter from \"../components/Filter\";\nimport ContactList from \"../components/ContactList\";\n\nimport phoneOperations from \"../redux/phone/phoneOperations\";\n\nclass Contacts extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <ContactEditor />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onFetchContacts: phoneOperations.fetchContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(Contacts);\n"],"sourceRoot":""}